function(add_found _name _isfound)
    if(${_isfound})
        set_property(GLOBAL APPEND PROPERTY PACKAGES_FOUND ${_name})
    else()
        set_property(GLOBAL APPEND PROPERTY PACKAGES_NOT_FOUND ${_name})
    endif()
endfunction()

function(pkg_check _name _var)
    pkg_check_modules(${_var} ${ARGN})
    add_found(${_name} ${_var}_FOUND)
endfunction()

function(check_option _var _val)
    if(${_var} AND NOT ${_val})
        message(SEND_ERROR "${_descr} cannot be enabled due to missing dependencies!")
    endif()
endfunction()

function(add_option _var _descr _val)
    if(${_val})
        set(_val ON)
    endif()

    option(${_var} ${_descr} ${_val})
    add_feature_info(${_descr} ${_var} "")
    check_option(${_var} ${_val})
endfunction()

function(add_dependent_option _var _descr _val _require)
    if(${_val})
        set(_val ON)
    endif()

    cmake_dependent_option(${_var} ${_descr} ${_val} ${_require} OFF)
    add_feature_info(${_descr} ${_var} "")
    check_option(${_var} ${_val})
endfunction()

option(CONFIG_STATIC "Static linking" OFF)
function(add_pkg _pkg _config)
    if(${_config})
        if (CONFIG_STATIC)
            set(static "_STATIC")
        endif()

        list(APPEND mpv_LIB ${${_pkg}${static}_LDFLAGS})
        list(APPEND mpv_INC ${${_pkg}_INCLUDE_DIRS})
        set(mpv_LIB ${mpv_LIB} PARENT_SCOPE)
        set(mpv_INC ${mpv_INC} PARENT_SCOPE)
    endif()
endfunction()

function(add_dep _dep _config)
    if(${_config})
        list(APPEND mpv_LIB ${${_dep}_LIBRARIES})
        list(APPEND mpv_INC ${${_dep}_INCLUDE_DIR})
        set(mpv_LIB ${mpv_LIB} PARENT_SCOPE)
        set(mpv_INC ${mpv_INC} PARENT_SCOPE)
    endif()
endfunction()

function(add_src _cond)
    if(${_cond})
        list(APPEND mpv_SRC ${ARGN})
        set(mpv_SRC ${mpv_SRC} PARENT_SCOPE)
    endif()
endfunction()
