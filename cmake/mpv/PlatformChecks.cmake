check_library_exists(m ctan "" HAVE_LIBM)

check_symbol_exists(mmap sys/mman.h HAVE_SYS_MMAN_H)
add_src(HAVE_SYS_MMAN_H audio/filter/af_export.c osdep/mmap_anon.c)

check_symbol_exists(MAP_FAILED sys/mman.h MMAN_HAS_MAP_FAILED)
if(NOT MMAN_HAS_MAP_FAILED)
    set(MMAN_MAP_FAILED "#define MAP_FAILED ((void *) -1)")
endif()

set(CMAKE_EXTRA_INCLUDE_FILES sys/sysinfo.h)
check_type_size("struct sysinfo" SYS_SYSINFO_H)
set(CMAKE_EXTRA_INCLUDE_FILES)

check_symbol_exists(dlopen dlfcn.h HAVE_DLOPEN)
if(NOT HAVE_DLOPEN)
    set(CMAKE_EXTRA_INCLUDE_FILES dlfcn.h)
    check_library_exists(dl dlopen "" HAVE_DLOPEN_LIB)
    set(CMAKE_EXTRA_INCLUDE_FILES)

    if(HAVE_DLOPEN_LIB)
        list(APPEND mpv_LIB dl)
    endif()
endif()
if(HAVE_DLOPEN OR HAVE_DLOPEN_LIB)
    set(HAVE_LIBDL 1)
endif()

check_symbol_exists(shmget sys/shm.h HAVE_SHM)
check_symbol_exists(select sys/select.h HAVE_POSIX_SELECT)

check_symbol_exists(glob glob.h HAVE_GLOB)
if(NOT HAVE_GLOB)
    add_src(1 osdep/glob-win.c)
endif()

check_symbol_exists(setmode io.h HAVE_SETMODE)

# networking -------------------------------------------------------------------
# check whether we need any socket libraries
if(WIN32)
    set(CMAKE_EXTRA_INCLUDE_FILES winsock2.h)
    check_library_exists(ws2_32 gethostbyname "" HAVE_WINSOCK2_H)
    set(CMAKE_EXTRA_INCLUDE_FILES)
    if(HAVE_WINSOCK2_H)
        list(APPEND SOCKLIB ws2_32)
    endif()
else()
    check_function_exists(socket HAVE_SOCKET)
    if(NOT HAVE_SOCKET)
        check_library_exists(socket socket "" HAVE_SOCKET)
        if(HAVE_SOCKET)
            list(APPEND SOCKLIB socket)
        endif()
    endif()

    check_function_exists(gethostbyname HAVE_GETHOSTBYNAME)
    if(NOT HAVE_GETHOSTBYNAME)
        check_library_exists(nsl gethostbyname "" HAVE_GETHOSTBYNAME)
        if(HAVE_GETHOSTBYNAME)
            list(APPEND SOCKLIB nsl)
        else()
            check_library_exists(bsd gethostbyname "" HAVE_GETHOSTBYNAME)
            if(HAVE_GETHOSTBYNAME)
                list(APPEND SOCKLIB bsd)
            endif()
        endif()
    endif()
endif()

if(SOCKLIB AND NOT WIN32)
    foreach(lib ${SOCKLIB})
        check_library_exists(${lib} inet_pton "" HAVE_INET_PTON)
        check_library_exists(${lib} inet_aton "" HAVE_INET_ATON)
    endforeach()
else()
    check_function_exists(inet_pton HAVE_INET_PTON)
    check_function_exists(inet_aton HAVE_INET_ATON)
endif()

if(NOT (HAVE_INET_PTON AND HAVE_INET_ATON))
    check_library_exists(resolv inet_pton "" HAVE_INET_PTON)
    check_library_exists(resolv inet_aton "" HAVE_INET_ATON)
    if(HAVE_INET_PTON AND HAVE_INET_ATON)
        set(RESOLVLIB resolv)
    endif()
endif()

foreach(header "sys/socket.h" "ws2tcpip.h" "sys/types.h")
    set(CMAKE_EXTRA_INCLUDE_FILES ${header})
    check_type_size(socklen_t SOCKLEN_T)
    set(CMAKE_EXTRA_INCLUDE_FILES)

    if(HAVE_SOCKLEN_T)
        break()
    endif()
endforeach()

if(WIN32)
    check_symbol_exists(closesocket winsock2.h HAVE_CLOSESOCKET)
endif()

set(HAVE_NETWORKING YES)
if(NOT HAVE_WINSOCK2_H AND NOT HAVE_INET_PTON AND NOT HAVE_INET_ATON)
    unset(HAVE_NETWORKING)
endif()

if(HAVE_NETWORKING)
    list(APPEND mpv_LIB ${SOCKLIB} ${RESOLVLIB})

    if(WIN32)
        check_symbol_exists(AF_INET6 ws2tcpip.h HAVE_AF_INET6)
    else()
        check_symbol_exists(AF_INET6 sys/socket.h HAVE_AF_INET6)
    endif()

    check_symbol_exists(gethostbyname2 netdb.h HAVE_GETHOSTBYNAME2)
endif()

# terminal stuff ---------------------------------------------------------------
set(CMAKE_EXTRA_INCLUDE_FILES term.h)
foreach(lib ncurses tinfo termcap)
    check_library_exists(${lib} tgetent "" HAVE_TERMCAP)

    if(HAVE_TERMCAP)
        list(APPEND mpv_LIB ${lib})
        break()
    endif()
endforeach()
set(CMAKE_EXTRA_INCLUDE_FILES)

check_include_files(termios.h HAVE_TERMIOS_H)
if(NOT HAVE_TERMIOS_H)
    check_include_files(sys/termios.h HAVE_SYS_TERMIOS_H)
endif()
if(HAVE_TERMIOS_H OR HAVE_SYS_TERMIOS_H)
    set(HAVE_TERMIOS 1)
endif()
